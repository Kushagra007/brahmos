// @flow
import { getNormalizedProps, toArray } from './utils';
import { isClassComponent } from './circularDep';
import {
  brahmosNode,
  TAG_ELEMENT_NODE,
  CLASS_COMPONENT_NODE,
  FUNCTIONAL_COMPONENT_NODE,
} from './brahmosNode';

import type { BrahmosNode, Ref } from './flow.types';

type Configs = { key: string, ref: Ref };

/**
 * Convert create element with native tags to BrahmosTagElement.
 * A BrahmosTagElement tag element can be used in similar way as
 * tagged template literals.
 * This are generated by similar use-case
 * createElement('div', props, children);
 */
export function createTagElement(element: string, configs: Configs, children: any): BrahmosNode {
  const node = brahmosNode(null, [configs, children], '');
  node.element = element;
  node.nodeType = TAG_ELEMENT_NODE;
  return node;
}

export function createElement(
  element: string | Function,
  configs: Configs,
  children: any,
): BrahmosNode {
  configs = configs || {};
  /**
   * If there is single children no need to keep it as an array
   */
  const argLn = arguments.length;
  const _children = argLn > 3 ? toArray(arguments, 2) : children;

  /**
   * If the create element is receiving an string element it means it is not a component,
   * but a simple tag instead. In that case return a tagElement instance.
   */
  if (typeof element === 'string') return createTagElement(element, configs, _children);

  // create a prop object excluding the key and ref prop and adding children prop
  const props = {
    ...element.defaultProps,
    ...getNormalizedProps(configs, element.__isForwardRef),
    children: _children,
  };

  // if the element is a lazy component, start fetching the underlying component
  if (element.__loadLazyComponent) element.__loadLazyComponent();

  const { key = '', ref } = configs;
  const _isClassComponent = isClassComponent(element);

  const node = brahmosNode(props, null, '' + key);

  node.nodeType = _isClassComponent ? CLASS_COMPONENT_NODE : FUNCTIONAL_COMPONENT_NODE;
  node.type = element;
  node.ref = _isClassComponent ? ref : null;

  return node;
}
